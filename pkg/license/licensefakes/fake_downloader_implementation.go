/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package licensefakes

import (
	"sync"

	"sigs.k8s.io/bom/pkg/license"
)

type FakeDownloaderImplementation struct {
	DownloadLicenseArchiveStub        func(string) ([]byte, error)
	downloadLicenseArchiveMutex       sync.RWMutex
	downloadLicenseArchiveArgsForCall []struct {
		arg1 string
	}
	downloadLicenseArchiveReturns struct {
		result1 []byte
		result2 error
	}
	downloadLicenseArchiveReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetLatestTagStub        func() (string, error)
	getLatestTagMutex       sync.RWMutex
	getLatestTagArgsForCall []struct {
	}
	getLatestTagReturns struct {
		result1 string
		result2 error
	}
	getLatestTagReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetLicensesStub        func(string) (*license.List, error)
	getLicensesMutex       sync.RWMutex
	getLicensesArgsForCall []struct {
		arg1 string
	}
	getLicensesReturns struct {
		result1 *license.List
		result2 error
	}
	getLicensesReturnsOnCall map[int]struct {
		result1 *license.List
		result2 error
	}
	SetOptionsStub        func(*license.DownloaderOptions)
	setOptionsMutex       sync.RWMutex
	setOptionsArgsForCall []struct {
		arg1 *license.DownloaderOptions
	}
	VersionStub        func() string
	versionMutex       sync.RWMutex
	versionArgsForCall []struct {
	}
	versionReturns struct {
		result1 string
	}
	versionReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDownloaderImplementation) DownloadLicenseArchive(arg1 string) ([]byte, error) {
	fake.downloadLicenseArchiveMutex.Lock()
	ret, specificReturn := fake.downloadLicenseArchiveReturnsOnCall[len(fake.downloadLicenseArchiveArgsForCall)]
	fake.downloadLicenseArchiveArgsForCall = append(fake.downloadLicenseArchiveArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DownloadLicenseArchiveStub
	fakeReturns := fake.downloadLicenseArchiveReturns
	fake.recordInvocation("DownloadLicenseArchive", []interface{}{arg1})
	fake.downloadLicenseArchiveMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDownloaderImplementation) DownloadLicenseArchiveCallCount() int {
	fake.downloadLicenseArchiveMutex.RLock()
	defer fake.downloadLicenseArchiveMutex.RUnlock()
	return len(fake.downloadLicenseArchiveArgsForCall)
}

func (fake *FakeDownloaderImplementation) DownloadLicenseArchiveCalls(stub func(string) ([]byte, error)) {
	fake.downloadLicenseArchiveMutex.Lock()
	defer fake.downloadLicenseArchiveMutex.Unlock()
	fake.DownloadLicenseArchiveStub = stub
}

func (fake *FakeDownloaderImplementation) DownloadLicenseArchiveArgsForCall(i int) string {
	fake.downloadLicenseArchiveMutex.RLock()
	defer fake.downloadLicenseArchiveMutex.RUnlock()
	argsForCall := fake.downloadLicenseArchiveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDownloaderImplementation) DownloadLicenseArchiveReturns(result1 []byte, result2 error) {
	fake.downloadLicenseArchiveMutex.Lock()
	defer fake.downloadLicenseArchiveMutex.Unlock()
	fake.DownloadLicenseArchiveStub = nil
	fake.downloadLicenseArchiveReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeDownloaderImplementation) DownloadLicenseArchiveReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.downloadLicenseArchiveMutex.Lock()
	defer fake.downloadLicenseArchiveMutex.Unlock()
	fake.DownloadLicenseArchiveStub = nil
	if fake.downloadLicenseArchiveReturnsOnCall == nil {
		fake.downloadLicenseArchiveReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.downloadLicenseArchiveReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeDownloaderImplementation) GetLatestTag() (string, error) {
	fake.getLatestTagMutex.Lock()
	ret, specificReturn := fake.getLatestTagReturnsOnCall[len(fake.getLatestTagArgsForCall)]
	fake.getLatestTagArgsForCall = append(fake.getLatestTagArgsForCall, struct {
	}{})
	stub := fake.GetLatestTagStub
	fakeReturns := fake.getLatestTagReturns
	fake.recordInvocation("GetLatestTag", []interface{}{})
	fake.getLatestTagMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDownloaderImplementation) GetLatestTagCallCount() int {
	fake.getLatestTagMutex.RLock()
	defer fake.getLatestTagMutex.RUnlock()
	return len(fake.getLatestTagArgsForCall)
}

func (fake *FakeDownloaderImplementation) GetLatestTagCalls(stub func() (string, error)) {
	fake.getLatestTagMutex.Lock()
	defer fake.getLatestTagMutex.Unlock()
	fake.GetLatestTagStub = stub
}

func (fake *FakeDownloaderImplementation) GetLatestTagReturns(result1 string, result2 error) {
	fake.getLatestTagMutex.Lock()
	defer fake.getLatestTagMutex.Unlock()
	fake.GetLatestTagStub = nil
	fake.getLatestTagReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDownloaderImplementation) GetLatestTagReturnsOnCall(i int, result1 string, result2 error) {
	fake.getLatestTagMutex.Lock()
	defer fake.getLatestTagMutex.Unlock()
	fake.GetLatestTagStub = nil
	if fake.getLatestTagReturnsOnCall == nil {
		fake.getLatestTagReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getLatestTagReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDownloaderImplementation) GetLicenses(arg1 string) (*license.List, error) {
	fake.getLicensesMutex.Lock()
	ret, specificReturn := fake.getLicensesReturnsOnCall[len(fake.getLicensesArgsForCall)]
	fake.getLicensesArgsForCall = append(fake.getLicensesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetLicensesStub
	fakeReturns := fake.getLicensesReturns
	fake.recordInvocation("GetLicenses", []interface{}{arg1})
	fake.getLicensesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDownloaderImplementation) GetLicensesCallCount() int {
	fake.getLicensesMutex.RLock()
	defer fake.getLicensesMutex.RUnlock()
	return len(fake.getLicensesArgsForCall)
}

func (fake *FakeDownloaderImplementation) GetLicensesCalls(stub func(string) (*license.List, error)) {
	fake.getLicensesMutex.Lock()
	defer fake.getLicensesMutex.Unlock()
	fake.GetLicensesStub = stub
}

func (fake *FakeDownloaderImplementation) GetLicensesArgsForCall(i int) string {
	fake.getLicensesMutex.RLock()
	defer fake.getLicensesMutex.RUnlock()
	argsForCall := fake.getLicensesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDownloaderImplementation) GetLicensesReturns(result1 *license.List, result2 error) {
	fake.getLicensesMutex.Lock()
	defer fake.getLicensesMutex.Unlock()
	fake.GetLicensesStub = nil
	fake.getLicensesReturns = struct {
		result1 *license.List
		result2 error
	}{result1, result2}
}

func (fake *FakeDownloaderImplementation) GetLicensesReturnsOnCall(i int, result1 *license.List, result2 error) {
	fake.getLicensesMutex.Lock()
	defer fake.getLicensesMutex.Unlock()
	fake.GetLicensesStub = nil
	if fake.getLicensesReturnsOnCall == nil {
		fake.getLicensesReturnsOnCall = make(map[int]struct {
			result1 *license.List
			result2 error
		})
	}
	fake.getLicensesReturnsOnCall[i] = struct {
		result1 *license.List
		result2 error
	}{result1, result2}
}

func (fake *FakeDownloaderImplementation) SetOptions(arg1 *license.DownloaderOptions) {
	fake.setOptionsMutex.Lock()
	fake.setOptionsArgsForCall = append(fake.setOptionsArgsForCall, struct {
		arg1 *license.DownloaderOptions
	}{arg1})
	stub := fake.SetOptionsStub
	fake.recordInvocation("SetOptions", []interface{}{arg1})
	fake.setOptionsMutex.Unlock()
	if stub != nil {
		fake.SetOptionsStub(arg1)
	}
}

func (fake *FakeDownloaderImplementation) SetOptionsCallCount() int {
	fake.setOptionsMutex.RLock()
	defer fake.setOptionsMutex.RUnlock()
	return len(fake.setOptionsArgsForCall)
}

func (fake *FakeDownloaderImplementation) SetOptionsCalls(stub func(*license.DownloaderOptions)) {
	fake.setOptionsMutex.Lock()
	defer fake.setOptionsMutex.Unlock()
	fake.SetOptionsStub = stub
}

func (fake *FakeDownloaderImplementation) SetOptionsArgsForCall(i int) *license.DownloaderOptions {
	fake.setOptionsMutex.RLock()
	defer fake.setOptionsMutex.RUnlock()
	argsForCall := fake.setOptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDownloaderImplementation) Version() string {
	fake.versionMutex.Lock()
	ret, specificReturn := fake.versionReturnsOnCall[len(fake.versionArgsForCall)]
	fake.versionArgsForCall = append(fake.versionArgsForCall, struct {
	}{})
	stub := fake.VersionStub
	fakeReturns := fake.versionReturns
	fake.recordInvocation("Version", []interface{}{})
	fake.versionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDownloaderImplementation) VersionCallCount() int {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	return len(fake.versionArgsForCall)
}

func (fake *FakeDownloaderImplementation) VersionCalls(stub func() string) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = stub
}

func (fake *FakeDownloaderImplementation) VersionReturns(result1 string) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = nil
	fake.versionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDownloaderImplementation) VersionReturnsOnCall(i int, result1 string) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = nil
	if fake.versionReturnsOnCall == nil {
		fake.versionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.versionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeDownloaderImplementation) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadLicenseArchiveMutex.RLock()
	defer fake.downloadLicenseArchiveMutex.RUnlock()
	fake.getLatestTagMutex.RLock()
	defer fake.getLatestTagMutex.RUnlock()
	fake.getLicensesMutex.RLock()
	defer fake.getLicensesMutex.RUnlock()
	fake.setOptionsMutex.RLock()
	defer fake.setOptionsMutex.RUnlock()
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDownloaderImplementation) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ license.DownloaderImplementation = new(FakeDownloaderImplementation)
